var documenterSearchIndex = {"docs":
[{"location":"#SummarizedExperiments-for-Julia","page":"Home","title":"SummarizedExperiments for Julia","text":"","category":"section"},{"location":"#Quick-start","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Users may install this package from the GitHub repository through the usual process on the Pkg REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"add https://github.com/LTLA/MultiAssayExperiment.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"And then:","category":"page"},{"location":"#Class-definition","page":"Home","title":"Class definition","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MultiAssayExperiment","category":"page"},{"location":"#MultiAssayExperiments.MultiAssayExperiment","page":"Home","title":"MultiAssayExperiments.MultiAssayExperiment","text":"The MultiAssayExperiment class is a Bioconductor container for multimodal studies. This is basically a list of SummarizedExperiment objects, each of which represents a particular experimental modality. A mapping table specifies the relationships between the columns of each SummarizedExperiment and a conceptual \"sample\", assuming that each sample has data for zero, one or multiple modalities.  A sample can be defined as anything from a cell line culture to an individual patient, depending on the context.\n\nThis implementation makes a few changes from the original Bioconductor implementation. We do not consider the MultiAssayExperiment to contain any \"columns\", as this was unnecessarily confusing. The previous colData field has thus been renamed to sampledata, to reflect the fact that we are operating on samples. We are also much more relaxed about harmonization between the experiments, sample mapping, and sample data - or more specifically, we don't harmonize at all, allowing greater flexibility in storage and manipulation.\n\n\n\n\n\n","category":"type"},{"location":"#Constructors","page":"Home","title":"Constructors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MultiAssayExperiment(\n    experiments::DataStructures.OrderedDict{String,SummarizedExperiments.SummarizedExperiment},\n    sampledata::DataFrames.DataFrame,\n    samplemap::DataFrames.DataFrame,\n    metadata::Dict{String,Any} = Dict{String,Any}()\n)","category":"page"},{"location":"#MultiAssayExperiments.MultiAssayExperiment-2","page":"Home","title":"MultiAssayExperiments.MultiAssayExperiment","text":"MultiAssayExperiment(experiments, sampledata, samplemap, metadata = Dict{String,Any}())\n\nCreates a new MultiAssayExperiment from its components.\n\nexperiments should contain ordered pairs of experiment names and SummarizedExperiment objects. Each SummarizedExperiment may contain any number and identity for the rows. However, the column names must be non-nothing and unique within each object.\n\nEach row of sampledata corresponds to a conceptual sample. The first column should be called name and contain the names of the samples in a Vector{String}. Sample names are arbitrary but should be unique. Any number and type of other columns may be provided, usually containing sample-level annotations.\n\nThe samplemap table is expected to have 3 Vector{String} columns - sample, experiment and colname - specifying the correspondence between each conceptual sample and the columns of a particular SummarizedExperiment. Values in the sample column will be cross-referenced to values in the name column of the sampledata; values in the experiment column will be cross-referenced to the keys of experiments; and the colname column will be cross-referenced to the column names of each SummarizedExperiment. Note that values in the columns need not have a 1:1 match to their cross-referenced target;  any missing values in one or the other will be ignored in the methods. Rows of the table should be unique.\n\nThe metadata stores other annotations unrelated to the samples.\n\nExamples\n\njulia> using MultiAssayExperiments\n\njulia> import SummarizedExperiments, DataStructures, DataFrames;\n\njulia> exp = DataStructures.OrderedDict{String,SummarizedExperiments.SummarizedExperiment}();\n\njulia> exp[\"foo\"] = SummarizedExperiments.exampleobject(100, 2);\n\njulia> exp[\"bar\"] = SummarizedExperiments.exampleobject(50, 5);\n\njulia> cd = DataFrames.DataFrame(\n           name = [\"Aaron\", \"Michael\", \"Jayaram\", \"Sebastien\", \"John\"],\n           disease = [\"good\", \"bad\", \"good\", \"bad\", \"very bad\"]\n       );\n\njulia> sm = DataFrames.DataFrame(\n           sample = [\"Aaron\", \"Michael\", \"Aaron\", \"Michael\", \"Jayaram\", \"Sebastien\", \"John\"],\n           experiment = [\"foo\", \"foo\", \"bar\", \"bar\", \"bar\", \"bar\", \"bar\"],\n           colname = [\"Patient1\", \"Patient2\", \"Patient1\", \"Patient2\", \"Patient3\", \"Patient4\", \"Patient5\"]\n       );\n\njulia> using MultiAssayExperiments;\n\njulia> out = MultiAssayExperiment(exp, cd, sm)\nMultiAssayExperiment object\n  experiments(2): foo bar\n  sampledata(2): name disease\n  metadata(0):\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"MultiAssayExperiment(experiments::DataStructures.OrderedDict{String,SummarizedExperiments.SummarizedExperiment})","category":"page"},{"location":"#MultiAssayExperiments.MultiAssayExperiment-Tuple{OrderedCollections.OrderedDict{String, SummarizedExperiments.SummarizedExperiment}}","page":"Home","title":"MultiAssayExperiments.MultiAssayExperiment","text":"MultiAssayExperiment(experiments)\n\nCreates an MultiAssayExperiment object from a set of experiments. The per-sample column data and sample mapping is automatically created from the union of column names from all experiments.\n\nExamples\n\njulia> using MultiAssayExperiments\n\njulia> import SummarizedExperiments, DataStructures\n\njulia> exp = DataStructures.OrderedDict{String,SummarizedExperiments.SummarizedExperiment}();\n\njulia> exp[\"foo\"] = SummarizedExperiments.exampleobject(100, 10);\n\njulia> exp[\"bar\"] = SummarizedExperiments.exampleobject(50, 20);\n\njulia> out = MultiAssayExperiment(exp)\nMultiAssayExperiment object\n  experiments(2): foo bar\n  sampledata(1): name\n  metadata(0):\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"MultiAssayExperiment()","category":"page"},{"location":"#MultiAssayExperiments.MultiAssayExperiment-Tuple{}","page":"Home","title":"MultiAssayExperiments.MultiAssayExperiment","text":"MultiAssayExperiment()\n\nCreates an empty MultiAssayExperiment object.\n\nExamples\n\njulia> using MultiAssayExperiments\n\njulia> MultiAssayExperiment()\nMultiAssayExperiment object\n  experiments(0):\n  sampledata(1): name\n  metadata(0):\n\n\n\n\n\n","category":"method"},{"location":"#Getters","page":"Home","title":"Getters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"experiment(x::MultiAssayExperiment)","category":"page"},{"location":"#MultiAssayExperiments.experiment-Tuple{MultiAssayExperiment}","page":"Home","title":"MultiAssayExperiments.experiment","text":"experiment(x[, i]; sampledata = false)\n\nExtract the specified SummarizedExperiment from a MultiAssayExperiment x. i may be a positive integer no greater than the number of experiments in x, or a string specifying the name of the desired experiment. If i is not specified, it defaults to the first experiment in x.\n\nIf sampledata = true, we attempt to add the sample data of x to the coldata of the returned SummarizedExperiment. This is done by subsetting sampledata(x) based on sample mapping to the columns of the returned SummarizedExperiment - see expandsampledata for more details. If there are columns in the sampledata(x) and the coldata of the SummarizedExperiment with the same name but different values, the former are omitted with a warning.\n\nNote that, if sampledata = true, the returned SummarizedExperiment will be a copy of the relevant experiment in x. If false, the returned object will be a reference.\n\nExamples\n\njulia> using MultiAssayExperiments;\n\njulia> x = exampleobject();\n\njulia> experiment(x)\n100x10 SummarizedExperiments.SummarizedExperiment\n  assays(3): foo bar whee\n  rownames: Gene1 Gene2 ... Gene99 Gene100\n  rowdata(2): name Type\n  colnames: foo1 foo2 ... foo9 foo10\n  coldata(3): name Treatment Response\n  metadata(1): version\n\njulia> experiment(x, 1); # same result\n\njulia> experiment(x, \"foo\");\n\njulia> experiment(x, \"foo\", sampledata = true) # add sample data\n100x10 SummarizedExperiments.SummarizedExperiment\n  assays(3): foo bar whee\n  rownames: Gene1 Gene2 ... Gene99 Gene100\n  rowdata(2): name Type\n  colnames: foo1 foo2 ... foo9 foo10\n  coldata(4): name Treatment Response disease\n  metadata(1): version\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"experiments(x::MultiAssayExperiment)","category":"page"},{"location":"#MultiAssayExperiments.experiments-Tuple{MultiAssayExperiment}","page":"Home","title":"MultiAssayExperiments.experiments","text":"experiments(x)\n\nReturn an ordered dictionary containing all experiments in the MultiAssayExperiment x.\n\nExamples\n\njulia> using MultiAssayExperiments\n\njulia> x = exampleobject();\n\njulia> collect(keys(experiments(x)))\n2-element Vector{String}:\n \"foo\"\n \"bar\"\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"sampledata(x::MultiAssayExperiment)","category":"page"},{"location":"#MultiAssayExperiments.sampledata-Tuple{MultiAssayExperiment}","page":"Home","title":"MultiAssayExperiments.sampledata","text":"sampledata(x, check = true)\n\nReturn a DataFrame containing the sample data in the MultiAssayExperiment x.\n\nThe returned object should contain name as the first column, containing a vector of unique strings. If check = true, the function will check the validity of the sample data before returning it.\n\nExamples\n\njulia> using MultiAssayExperiments\n\njulia> x = exampleobject();\n\njulia> names(sampledata(x))\n2-element Vector{String}:\n \"name\"\n \"disease\"\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"samplemap(x::MultiAssayExperiment)","category":"page"},{"location":"#MultiAssayExperiments.samplemap-Tuple{MultiAssayExperiment}","page":"Home","title":"MultiAssayExperiments.samplemap","text":"samplemap(x)\n\nReturn an ordered dictionary containing the sample mapping from the MultiAssayExperiment x.\n\nThe returned object should contain the sample, experiment and colname columns in that order. Each column should contain a vector of strings, and rows should be unique. If check = true, the function will check the validity of the sample data before returning it.\n\nExamples\n\njulia> using MultiAssayExperiments\n\njulia> x = exampleobject();\n\njulia> names(samplemap(x))\n3-element Vector{String}:\n \"sample\"\n \"experiment\"\n \"colname\"\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"metadata(x::MultiAssayExperiment)","category":"page"},{"location":"#MultiAssayExperiments.metadata-Tuple{MultiAssayExperiment}","page":"Home","title":"MultiAssayExperiments.metadata","text":"metadata(x)\n\nReturn a dictionary containing the metadata from the MultiAssayExperiment x.\n\nExamples\n\njulia> using MultiAssayExperiments\n\njulia> x = exampleobject();\n\njulia> collect(keys(metadata(x)))\n1-element Vector{String}:\n \"version\"\n\n\n\n\n\n","category":"method"},{"location":"#Setters","page":"Home","title":"Setters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"setexperiment!(x::MultiAssayExperiment, value::SummarizedExperiments.SummarizedExperiment)","category":"page"},{"location":"#MultiAssayExperiments.setexperiment!-Tuple{MultiAssayExperiment, SummarizedExperiments.SummarizedExperiment}","page":"Home","title":"MultiAssayExperiments.setexperiment!","text":"setexperiment!(x[, i], value)\n\nSet experiment i in MultiAssayExperiment x to the SummarizedExperiment value. This returns a reference to the modified x.\n\ni may be a positive integer, in which case it should be no greater than the length of experiments(x). It may also be a string specifying a new or existing experiment in x. If omitted, we set the first experiment by default.\n\nExamples\n\njulia> using MultiAssayExperiments;\n\njulia> x = exampleobject();\n\njulia> size(experiment(x, 2))\n(50, 8)\n\njulia> val = experiment(x);\n\njulia> setexperiment!(x, 2, val);\n\njulia> size(experiment(x, 2))\n(100, 10)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"setexperiments!(x::MultiAssayExperiment, value::DataStructures.OrderedDict{String,SummarizedExperiments.SummarizedExperiment})","category":"page"},{"location":"#MultiAssayExperiments.setexperiments!-Tuple{MultiAssayExperiment, OrderedCollections.OrderedDict{String, SummarizedExperiments.SummarizedExperiment}}","page":"Home","title":"MultiAssayExperiments.setexperiments!","text":"setexperiments!(x, value)\n\nSet the experiments in the MultiAssayExperiment x to the OrderedDict value. This returns a reference to the modified x.\n\nExamples\n\njulia> using MultiAssayExperiments\n\njulia> x = exampleobject();\n\njulia> y = copy(experiments(x));\n\njulia> delete!(y, \"foo\");\n\njulia> setexperiments!(x, y);\n\njulia> collect(keys(experiments(x)))\n1-element Vector{String}:\n \"bar\"\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"setsampledata!(x::MultiAssayExperiment, value::DataFrames.DataFrame)","category":"page"},{"location":"#MultiAssayExperiments.setsampledata!-Tuple{MultiAssayExperiment, DataFrames.DataFrame}","page":"Home","title":"MultiAssayExperiments.setsampledata!","text":"setsampledata!(x, value)\n\nSet the sample data in the MultiAssayExperiment x to the DataFrame value.\n\nThe returned object should contain name as the first column, containing a vector of unique strings. If check = true, the function will check the validity of the sample data before returning it.\n\nExamples\n\njulia> using MultiAssayExperiments\n\njulia> x = exampleobject();\n\njulia> sd = copy(sampledata(x));\n\njulia> sd[!,\"stuff\"] = [rand() for i in 1:size(sd)[1]];\n\njulia> setsampledata!(x, sd);\n\njulia> names(sampledata(x))\n3-element Vector{String}:\n \"name\"\n \"disease\"\n \"stuff\"\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"setsamplemap!(x::MultiAssayExperiment, value::DataFrames.DataFrame)","category":"page"},{"location":"#MultiAssayExperiments.setsamplemap!-Tuple{MultiAssayExperiment, DataFrames.DataFrame}","page":"Home","title":"MultiAssayExperiments.setsamplemap!","text":"setsamplemap!(x, value)\n\nSet the sample mapping in the MultiAssayExperiment x to a DataFrame value. This returns a reference to the modified x.\n\nvalue should contain the sample, experiment and colname columns in that order. Each column should contain a vector of strings, and rows should be unique.\n\nsample should (but is not required to) correspond to the names of samples in sampledata(x); experiment should (but is not required to) correspond to the keys of experiments(x); and colname should (but is not required to) correspond to the columns of the corresponding SummarizedExperiment in experiments(x). This correspondence is used for convenient subsetting and extraction in the various extract methods.\n\nExamples\n\njulia> using MultiAssayExperiments\n\njulia> x = exampleobject();\n\njulia> y = samplemap(x)[1:10,:];\n\njulia> setsamplemap!(x, y);\n\njulia> size(samplemap(x))[1]\n10\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"setmetadata!(x::MultiAssayExperiment, value::Dict{String,Any})","category":"page"},{"location":"#MultiAssayExperiments.setmetadata!-Tuple{MultiAssayExperiment, Dict{String, Any}}","page":"Home","title":"MultiAssayExperiments.setmetadata!","text":"setmetadata!(x, value)\n\nSet the metadata of a MultiAssayExperiment x to a dictionary value. This returns a reference to the modified x.\n\nExamples\n\njulia> using MultiAssayExperiments\n\njulia> x = exampleobject();\n\njulia> meta = copy(metadata(x));\n\njulia> meta[\"version\"] = \"0.2.0\";\n\njulia> setmetadata!(x, meta);\n\njulia> metadata(x)[\"version\"]\n\"0.2.0\"\n\n\n\n\n\n","category":"method"},{"location":"#Miscellaneous","page":"Home","title":"Miscellaneous","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Base.copy(x::MultiAssayExperiment)","category":"page"},{"location":"#Base.copy-Tuple{MultiAssayExperiment}","page":"Home","title":"Base.copy","text":"copy(x::MultiAssayExperiment)\n\nReturn a copy of x, where all components are identically-same as those in x.\n\nExamples\n\njulia> using MultiAssayExperiments, DataFrames\n\njulia> x = exampleobject();\n\njulia> x2 = copy(x);\n\njulia> setsampledata!(x2, DataFrame(name=[\"A\", \"B\"]));\n\njulia> size(sampledata(x))\n(5, 2)\n\njulia> size(sampledata(x2)) # Change to reference is only reflected in x2.\n(2, 1)\n\njulia> stuff = experiments(x);\n\njulia> delete!(stuff, \"bar\");\n\njulia> collect(keys(experiments(x2)))\n1-element Array{String,1}:\n \"foo\"\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"Base.deepcopy(x::MultiAssayExperiment)","category":"page"},{"location":"#Base.deepcopy-Tuple{MultiAssayExperiment}","page":"Home","title":"Base.deepcopy","text":"deepcopy(x::MultiAssayExperiment)\n\nReturn a deep copy of x and all of its components.\n\nExamples\n\njulia> using MultiAssayExperiments, DataFrames\n\njulia> x = exampleobject();\n\njulia> x2 = deepcopy(x);\n\njulia> insertcols!(sampledata(x), 2, \"WHEE\" => 1:5); # References now point to different objects.\n\njulia> names(sampledata(x2))\n2-element Array{String,1}:\n \"name\"\n \"disease\"\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"Base.show(io::IO, x::MultiAssayExperiment)","category":"page"},{"location":"#Base.show-Tuple{IO, MultiAssayExperiment}","page":"Home","title":"Base.show","text":"print(io::IO, x::MultiAssayExperiment)\n\nPrint a summary of x.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"exampleobject()","category":"page"},{"location":"#MultiAssayExperiments.exampleobject-Tuple{}","page":"Home","title":"MultiAssayExperiments.exampleobject","text":"exampleobject()\n\nCreate an example MultiAssayExperiment object.  This is to be used to improve the succinctness of examples and tests.\n\nExamples\n\njulia> using MultiAssayExperiments \n\njulia> x = exampleobject()\nMultiAssayExperiment object\n  experiments(2): foo bar\n  sampledata(2): name disease\n  metadata(1): version\n\n\n\n\n\n","category":"method"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is maintained by Aaron Lun (@LTLA). If you have bug reports or feature requests, please post them as issues at the GitHub repository.","category":"page"}]
}
